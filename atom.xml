<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[NikolaMandic.github.io]]></title>
  <link href="http://NikolaMandic.github.io/atom.xml" rel="self"/>
  <link href="http://NikolaMandic.github.io/"/>
  <updated>2013-10-22T23:38:23+02:00</updated>
  <id>http://NikolaMandic.github.io/</id>
  <author>
    <name><![CDATA[Nikola Mandic]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[requirejs module and angularjs]]></title>
    <link href="http://NikolaMandic.github.io/blog/2013/10/22/requirejs-module-and-angularjs/"/>
    <updated>2013-10-22T23:33:00+02:00</updated>
    <id>http://NikolaMandic.github.io/blog/2013/10/22/requirejs-module-and-angularjs</id>
    <content type="html"><![CDATA[<p>here is a way of including requirejs package to be used as angular dependency.</p>

<div><script src='https://gist.github.com/7108545.js'></script>
<noscript><pre><code>'use strict';

//setup module loading
require.config({
    packages:[{
      name:'ace',
      location:'../bower_components/ace/lib/ace',
      main:'ace'
    }]
});
//create wraper service
angular.module('myShinyNewApp').factory('ace', function() {
  var ace={
    ace:null
  };

  require(['ace'],function(_ace){
      ace.ace=_ace;
  });
  return ace;
});

//and now use it for example in a directive

angular.module('ldApp').directive('editor',['ace',function(aceS) {
  var ace = aceS.ace;
  //then it can be used like it would normaly
  var editor = ace.edit(element);

}]);
</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[diskotek: second iteration]]></title>
    <link href="http://NikolaMandic.github.io/blog/2013/10/19/diskotek-second-iteration/"/>
    <updated>2013-10-19T18:52:00+02:00</updated>
    <id>http://NikolaMandic.github.io/blog/2013/10/19/diskotek-second-iteration</id>
    <content type="html"><![CDATA[<p>second iteration of diskotek development will be bigger than the first.<br/>
I am currently working on a scripting language called beeScript.
Thought behind beeScript is to have an automation language for the debugger like some modern debuggers have.</p>

<p>Currently it looks something like this(as development goes on it may change):</p>

<pre><code>def doThat()
  variable=5

def doThis()
  variable=3

place = 0x80000000
memory.place = 'nop'
variable = memory.place
if variable == 3
  doThat()
else
  doThis()

while variable
  variable=variable-1
</code></pre>

<p>I plan to add something like this:</p>

<pre><code>memory.headers.elfHeader
fImage.headers.elfHeader
fImage.headers.relocations
</code></pre>

<p>Also plan to integrate Ace editor in main page.<br/>
BeeScript implementation is in CoffeeScript it has compiler in CoffeeScript that produces something
that might be called &ldquo;code&rdquo;, it&rsquo;s a stack of functions.
That generated content is then turned over to simple stack machine runner that runs those functions one by one.</p>

<p>Besides scripting togetherJS is half integrated on page it needs more work.<br/>
x86 support is added.<br/>
It has support for editing of raw bytes when user selects rows and then presses shift+enter. ctrl+enter will open instruction editing that does not work now.
It opens up editbox where one can enter new bytes. If they do not fit it is error.<br/>
That is all located in development branch.</p>
]]></content>
  </entry>
  
</feed>
